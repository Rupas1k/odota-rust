# odota_py.pyi
from typing import Optional, List

class PyEntry:
    @property
    def time(self) -> int: ...

    @property
    def type(self) -> Optional[str]: ...

    @property
    def team(self) -> Optional[int]: ...

    @property
    def unit(self) -> Optional[str]: ...

    @property
    def key(self) -> Optional[str]: ...

    @property
    def value(self) -> Optional[int]: ...

    @property
    def slot(self) -> Optional[int]: ...

    @property
    def player_slot(self) -> Optional[int]: ...

    @property
    def player1(self) -> Optional[int]: ...

    @property
    def player2(self) -> Optional[int]: ...

    @property
    def attackername(self) -> Optional[str]: ...

    @property
    def targetname(self) -> Optional[str]: ...

    @property
    def sourcename(self) -> Optional[str]: ...

    @property
    def targetsourcename(self) -> Optional[str]: ...

    @property
    def attackerhero(self) -> Optional[bool]: ...

    @property
    def targethero(self) -> Optional[bool]: ...

    @property
    def attackerillusion(self) -> Optional[bool]: ...

    @property
    def targetillusion(self) -> Optional[bool]: ...

    @property
    def abilitylevel(self) -> Optional[int]: ...

    @property
    def inflictor(self) -> Optional[str]: ...

    @property
    def gold_reason(self) -> Optional[int]: ...

    @property
    def xp_reason(self) -> Optional[int]: ...

    @property
    def valuename(self) -> Optional[str]: ...

    @property
    def gold(self) -> Optional[int]: ...

    @property
    def lh(self) -> Optional[int]: ...

    @property
    def xp(self) -> Optional[int]: ...

    @property
    def x(self) -> Optional[int]: ...

    @property
    def y(self) -> Optional[int]: ...

    @property
    def z(self) -> Optional[int]: ...

    @property
    def stuns(self) -> Optional[float]: ...

    @property
    def hero_id(self) -> Optional[int]: ...

    @property
    def itemslot(self) -> Optional[int]: ...

    @property
    def charges(self) -> Optional[int]: ...

    @property
    def secondary_charges(self) -> Optional[int]: ...

    @property
    def life_state(self) -> Optional[int]: ...

    @property
    def level(self) -> Optional[int]: ...

    @property
    def kills(self) -> Optional[int]: ...

    @property
    def deaths(self) -> Optional[int]: ...

    @property
    def assists(self) -> Optional[int]: ...

    @property
    def denies(self) -> Optional[int]: ...

    @property
    def entityleft(self) -> Optional[bool]: ...

    @property
    def ehandle(self) -> Optional[int]: ...

    @property
    def obs_placed(self) -> Optional[int]: ...

    @property
    def sen_placed(self) -> Optional[int]: ...

    @property
    def creeps_stacked(self) -> Optional[int]: ...

    @property
    def camps_stacked(self) -> Optional[int]: ...

    @property
    def rune_pickups(self) -> Optional[int]: ...

    @property
    def repicked(self) -> Optional[bool]: ...

    @property
    def randomed(self) -> Optional[bool]: ...

    @property
    def pred_vict(self) -> Optional[bool]: ...

    @property
    def stun_duration(self) -> Optional[float]: ...

    @property
    def slow_duration(self) -> Optional[float]: ...

    @property
    def tracked_death(self) -> Optional[bool]: ...

    @property
    def greevils_greed_stack(self) -> Optional[int]: ...

    @property
    def tracked_sourcename(self) -> Optional[str]: ...

    @property
    def firstblood_claimed(self) -> Optional[bool]: ...

    @property
    def teamfight_participation(self) -> Optional[float]: ...

    @property
    def towers_killed(self) -> Optional[int]: ...

    @property
    def roshans_killed(self) -> Optional[int]: ...

    @property
    def observers_placed(self) -> Optional[int]: ...

    @property
    def draft_order(self) -> Optional[int]: ...

    @property
    def pick(self) -> Optional[bool]: ...

    @property
    def draft_active_team(self) -> Optional[int]: ...

    @property
    def draft_extime0(self) -> Optional[int]: ...

    @property
    def draft_extime1(self) -> Optional[int]: ...

    @property
    def networth(self) -> Optional[int]: ...

    @property
    def stage(self) -> Optional[int]: ...

def parse_replay(binary: bytes) -> List[PyEntry]: ...